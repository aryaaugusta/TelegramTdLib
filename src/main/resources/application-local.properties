server.port=${PORT:9191}
spring.datasource.url=jdbc:mysql://localhost:3306/telegram-core
spring.datasource.username=root
spring.datasource.password=bismillah


#spring.datasource.url=jdbc:mysql://172.18.182.87:3306/indomarco-tms?zeroDateTimeBehavior=CONVERT_TO_NULL&serverTimezone=Asia/Jakarta
#spring.datasource.username=adminedtstms
#spring.datasource.password=adminedts321!

#spring.datasource.url=jdbc:mysql://172.18.185.131:3306/indomarco-tms
#spring.datasource.username=idmapps
#spring.datasource.password=edts321
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL57Dialect
##Database PostgreSQL
#spring.datasource.url = jdbc:postgresql://localhost:5432/dbname
#spring.datasource.username = postgres
#spring.datasource.password = postgres
# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.hikari.maximum-pool-size=5
spring.datasource.hikari.max-lifetime=60000
spring.datasource.tomcat.test-while-idle=true
spring.datasource.tomcat.test-on-borrow=true
spring.datasource.tomcat.validation-query=SELECT 1
# Show or not log for each sql query
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=true
# Hibernate ddl auto (create, create-drop, update)
spring.jpa.hibernate.ddl-auto=update
# Naming strategy
#spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy
# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager)
# The SQL dialect makes Hibernate generate better SQL for the chosen database
# spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect
spring.application.name=indomarcotms
# LOGGING
logging.file.name=logs/${spring.application.name}.log
logging.file.max-size=1GB
logging.file.max-history=365
server.tomcat.accesslog.enabled=false
server.tomcat.basedir=logs
# MESSAGE BROKER
spring.kafka.bootstrap-servers=172.18.182.132:9091,172.18.182.132:9092,172.18.182.132:9093
spring.kafka.consumer.group-id=${spring.application.name}
spring.kafka.consumer.auto-offset-reset=earliest
# spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
# spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
# spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
# spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
# ACTUATOR
# management.endpoints.web.exposure.include=*
# EUREKA DISCOVERY SERVER
# eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka
# eureka.client.instance.preferIpAddress=true
# eureka.client.healthcheck.enabled=true
# eureka.instance.leaseRenewalIntervalInSeconds=30
# Bucket4j
spring.cache.cache-names[0]=rate-limit-buckets
spring.cache.caffeine.spec=maximumSize=100000,expireAfterAccess=3600s
bucket4j.enabled=false
bucket4j.filters[0].cache-name=rate-limit-buckets
bucket4j.filters[0].url=.*
bucket4j.filters[0].rate-limits[0].bandwidths[0].capacity=10
bucket4j.filters[0].rate-limits[0].bandwidths[0].time=5
bucket4j.filters[0].rate-limits[0].bandwidths[0].unit=seconds
#bucket4j.filters[0].rate-limits[0].bandwidths[0].fixed-refill-interval=1
#bucket4j.filters[0].rate-limits[0].bandwidths[0].fixed-refill-interval-unit=seconds
cors.allowed-origins=*
cors.allowed-methods=*
cors.allowed-headers=*
cors.exposed-headers=Authorization,Link,X-Total-Count
cors.allow-credentials=true
cors.max-age=1800
node.port = 31023
host.ip=localhost
host.port=${server.port}
host.path=
swagger.host=${host.ip}:${host.port}
swagger.path=/${host.path}

otp.expired = 300
otp.resend.one = 40
otp.resend.five = 300
otp.max.resend = 6
poin.active.remind = 225
poin.active.remind.view = 300
view.otp = N

keycloak.realm                      = indomarco-tms
keycloak.auth-server-url            = http://172.18.185.110:30888/auth
keycloak.ssl-required               = external
keycloak.resource                   = indomarco-tms-bo
keycloak.credentials.secret         = fb1f2d70-9695-4575-92de-441401e30a70
keycloak.min-time-between-jwks-requests=3600
keycloak.use-resource-role-mappings = true
keycloak.bearer-only                = true

application.keycloak.admin-cli.name  = admin-cli
application.keycloak.admin-cli.secret = bf8c8e8e-c9f8-4508-a2be-4a1694e1d0e7
application.keycloak.resource.uuid = f3b2a759-bf1f-4c12-b32e-8061a1143902
application.keycloak.client-scope.uuid = 29dd27bb-88e7-410b-a617-fb062016f659

spring.cloud.consul.enabled=false
spring.security.oauth2.resourceserver.jwt.jwk-set-uri = http://172.18.185.110:30888/auth/realms/indomarco-tms/protocol/openid-connect/certs


keyclaok.token.expires = 1800

services.configuration.url  = http://172.18.185.110:32080/configuration
services.aws.access-key: AKIARNPTMOK5J7MOC4QD
services.aws.secret-key: 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
services.aws.s3.public.bucket-name: indomarco-tms
services.aws.s3.public.region: ap-southeast-1


spring.servlet.multipart.max-file-size=1MB
spring.servlet.multipart.max-request-size=1MB

temp.file.message = D:\\test_download\\

spring.datasource.hikari.minimumIdle= 2
spring.datasource.hikari.maximumPoolSize= 10
spring.datasource.hikari.idleTimeout= 120000
spring.datasource.hikari.connectionTimeout= 300000
spring.datasource.hikari.leakDetectionThreshold= 300000


spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=fauziah.zee.pin@gmail.com
spring.mail.password=lmkntrguqdyltlxa

# Other properties
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.connectiontimeout=5000
spring.mail.properties.mail.smtp.timeout=5000
spring.mail.properties.mail.smtp.writetimeout=5000

# TLS , port 587
spring.mail.properties.mail.smtp.starttls.enable=true

# SSL, post 465
#spring.mail.properties.mail.smtp.socketFactory.port = 465
#spring.mail.properties.mail.smtp.socketFactory.class = javax.net.ssl.SSLSocketFactory


